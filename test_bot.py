#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è PayCollect Bot
"""

import os
import re
import json
import pytest
import telebot
import gspread
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TestBotConfiguration:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    
    def test_env_file_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞"""
        assert os.path.exists('.env'), "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def test_telegram_token_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram"""
        token = os.getenv('TELEGRAM_TOKEN')
        assert token is not None, "TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert len(token) > 10, "TELEGRAM_TOKEN —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
    
    def test_telegram_token_valid(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ Telegram"""
        token = os.getenv('TELEGRAM_TOKEN')
        if token:
            try:
                bot = telebot.TeleBot(token)
                me = bot.get_me()
                assert me.username is not None, "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def test_spreadsheet_id_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ID Google —Ç–∞–±–ª–∏—Ü—ã"""
        spreadsheet_id = os.getenv('SPREADSHEET_ID')
        assert spreadsheet_id is not None, "SPREADSHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert len(spreadsheet_id) > 10, "SPREADSHEET_ID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
    
    def test_chat_ids_exist(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ID —á–∞—Ç–æ–≤"""
        chat_admin_id = os.getenv('CHAT_ADMIN_ID')
        chat_snab_id = os.getenv('CHAT_SNAB_ID')
        
        assert chat_admin_id is not None, "CHAT_ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert chat_snab_id is not None, "CHAT_SNAB_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    def test_credentials_file_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–∞–º–∏ Google API"""
        credentials_file = 'your_credentials_file.json'
        assert os.path.exists(credentials_file), f"–§–∞–π–ª {credentials_file} –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def test_credentials_file_valid(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–∞–º–∏"""
        credentials_file = 'your_credentials_file.json'
        if os.path.exists(credentials_file):
            try:
                with open(credentials_file, 'r') as f:
                    creds = json.load(f)
                
                required_fields = ['type', 'project_id', 'private_key', 'client_email']
                for field in required_fields:
                    assert field in creds, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}"
                
                assert creds['type'] == 'service_account', "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"
                
            except json.JSONDecodeError:
                pytest.fail("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ –∫–ª—é—á–µ–π")
    
    def test_google_sheets_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets"""
        credentials_file = 'your_credentials_file.json'
        spreadsheet_id = os.getenv('SPREADSHEET_ID')
        
        if os.path.exists(credentials_file) and spreadsheet_id:
            try:
                scope = [
                    'https://www.googleapis.com/auth/spreadsheets',
                    'https://www.googleapis.com/auth/drive'
                ]
                gc = gspread.service_account(filename=credentials_file, scopes=scope)
                sh = gc.open_by_key(spreadsheet_id)
                assert sh.title is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"
                
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")

class TestMessageParsing:
    """–¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def test_valid_message_format(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        test_message = "@paycollect_bot 01.01.2025 - –û–±—ä–µ–∫—Ç2 - –°—Ç—Ä–æ–π–∫–∞ –ú–°–ö - –≠—Ç–∞–ø 3 - –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–Ω–∞ - –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–Ω–∞ –∞–ª—é–º–∏–Ω–∏–π - 30500 - –û–û–û –ü–µ—Ç—Ä–æ–≤–∏—á - –û–û–û –î–æ–º –ì–∞–∑–æ–±–µ—Ç–æ–Ω"
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        text = test_message.lstrip('@paycollect_bot').strip()
        parts = [item.strip() for item in text.split('-')]
        
        assert len(parts) == 9, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 9 —á–∞—Å—Ç–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {len(parts)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        date_pattern = r"\d{2}\.\d{2}\.\d{4}"
        assert re.match(date_pattern, parts[0]), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
        
        amount_pattern = r"^\d+$"
        assert re.match(amount_pattern, parts[6]), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã"
    
    def test_invalid_date_format(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
        test_message = "@paycollect_bot 1.1.2025 - –û–±—ä–µ–∫—Ç2 - –°—Ç—Ä–æ–π–∫–∞ –ú–°–ö - –≠—Ç–∞–ø 3 - –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–Ω–∞ - –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–Ω–∞ –∞–ª—é–º–∏–Ω–∏–π - 30500 - –û–û–û –ü–µ—Ç—Ä–æ–≤–∏—á - –û–û–û –î–æ–º –ì–∞–∑–æ–±–µ—Ç–æ–Ω"
        
        text = test_message.lstrip('@paycollect_bot').strip()
        parts = [item.strip() for item in text.split('-')]
        
        date_pattern = r"\d{2}\.\d{2}\.\d{4}"
        assert not re.match(date_pattern, parts[0]), "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ–π"
    
    def test_invalid_amount_format(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—É–º–º—ã"""
        test_message = "@paycollect_bot 01.01.2025 - –û–±—ä–µ–∫—Ç2 - –°—Ç—Ä–æ–π–∫–∞ –ú–°–ö - –≠—Ç–∞–ø 3 - –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–Ω–∞ - –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–Ω–∞ –∞–ª—é–º–∏–Ω–∏–π - 30500—Ä—É–± - –û–û–û –ü–µ—Ç—Ä–æ–≤–∏—á - –û–û–û –î–æ–º –ì–∞–∑–æ–±–µ—Ç–æ–Ω"
        
        text = test_message.lstrip('@paycollect_bot').strip()
        parts = [item.strip() for item in text.split('-')]
        
        amount_pattern = r"^\d+$"
        assert not re.match(amount_pattern, parts[6]), "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ–π"

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_tests = TestBotConfiguration()
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞", config_tests.test_env_file_exists),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram", config_tests.test_telegram_token_exists),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram", config_tests.test_telegram_token_valid),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ ID —Ç–∞–±–ª–∏—Ü—ã", config_tests.test_spreadsheet_id_exists),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ ID —á–∞—Ç–æ–≤", config_tests.test_chat_ids_exist),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π", config_tests.test_credentials_file_exists),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∫–ª—é—á–µ–π", config_tests.test_credentials_file_valid),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets", config_tests.test_google_sheets_connection),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            test_func()
            print(f"‚úÖ {test_name}")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: {e}")
            failed += 1
    
    # –¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
    print("\nüß™ –¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print("-" * 30)
    
    parsing_tests = TestMessageParsing()
    
    parsing_test_list = [
        ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", parsing_tests.test_valid_message_format),
        ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", parsing_tests.test_invalid_date_format),
        ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã", parsing_tests.test_invalid_amount_format),
    ]
    
    for test_name, test_func in parsing_test_list:
        try:
            test_func()
            print(f"‚úÖ {test_name}")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: {e}")
            failed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    
    if failed > 0:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        return False
    else:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True

def quick_config_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    if not os.path.exists('.env'):
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env")
    
    if not os.path.exists('your_credentials_file.json'):
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –∫–ª—é—á–µ–π Google API")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_TOKEN', 'SPREADSHEET_ID', 'CHAT_ADMIN_ID', 'CHAT_SNAB_ID']
    for var in required_vars:
        if not os.getenv(var):
            issues.append(f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var}")
    
    if issues:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"   ‚Ä¢ {issue}")
        return False
    else:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ")
        return True

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == 'quick':
        quick_config_check()
    else:
        run_tests()
