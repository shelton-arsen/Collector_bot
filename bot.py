import telebot
import gspread
import traceback
import re
import os
import logging
from datetime import datetime
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π Google —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ ID) –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env
SHEET_ADMIN_NAME = os.getenv("SHEET_ADMIN_NAME", "–ê–¥–º–∏–Ω –±–æ—Ç")  # –õ–∏—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω –±–æ—Ç–∞
SHEET_SNAB_NAME = os.getenv("SHEET_SNAB_NAME", "–°–ù–ê–ë –±–æ—Ç —Ç–µ–∫—É—â–∏–π")  # –õ–∏—Å—Ç –¥–ª—è —Å–Ω–∞–± –±–æ—Ç–∞
CHAT_ADMIN_ID = os.getenv("CHAT_ADMIN_ID", "")  # ID —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω –±–æ—Ç–∞
CHAT_SNAB_ID = os.getenv("CHAT_SNAB_ID", "")  # ID —á–∞—Ç–æ–≤ —Å–Ω–∞–± –±–æ—Ç–∞
CREDENTIALS_FILE = 'your_credentials_file.json'


# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets ---
scope = [
       'https://www.googleapis.com/auth/spreadsheets',
       'https://www.googleapis.com/auth/drive'
   ]

gc = gspread.service_account(filename=CREDENTIALS_FILE, scopes=scope)
sh = gc.open_by_key(SPREADSHEET_ID)
# –õ–∏—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Ç–∞

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}) –≤ —á–∞—Ç–µ {message.chat.id}")
    welcome_msg = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –æ–ø–ª–∞—Ç.\n\nüìã –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n@paycollect_bot [–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å]\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞"
    bot.reply_to(message, welcome_msg)
    logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info ---
@bot.message_handler(commands=['info'])
def send_info(message):
    logger.info(f"‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /info –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}) –≤ —á–∞—Ç–µ {message.chat.id}")
    info_msg = """üìù –ü—Ä–∏–º–µ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤:

@paycollect_bot 01.01.2025 - –û–±—ä–µ–∫—Ç2 - –°—Ç—Ä–æ–π–∫–∞ –ú–°–ö - –≠—Ç–∞–ø 3 - –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–Ω–∞ - –û–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–Ω–∞ –∞–ª—é–º–∏–Ω–∏–π - 30500 - –û–û–û –ü–µ—Ç—Ä–æ–≤–∏—á - –û–û–û –î–æ–º –ì–∞–∑–æ–±–µ—Ç–æ–Ω

üîπ –§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞ - –æ–±—ä–µ–∫—Ç - —Ä–µ–≥–∏–æ–Ω - —ç—Ç–∞–ø - –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –æ–ø–∏—Å–∞–Ω–∏–µ - —Å—É–º–º–∞ - –ø–æ—Å—Ç–∞–≤—â–∏–∫ - –∫–æ–º–ø–∞–Ω–∏—è
üîπ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –¥–µ—Ñ–∏—Å (-)
üîπ –°—É–º–º–∞: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤"""
    bot.reply_to(message, info_msg)
    logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ")

def find_empty_row(worksheet, date_column=1):  # date_column - –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å –¥–∞—Ç–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –≥–¥–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π –ø—É—Å—Ç."""
    data = worksheet.col_values(date_column)
    try:
        empty_row_index = data.index('') + 1  # –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏ + 1 = –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        return empty_row_index
    except ValueError:
        return len(data) + 1  # –ï—Å–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
def is_authorized_chat(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —á–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    chat_id_str = str(message.chat.id)
    admin_chats = [id.strip() for id in CHAT_ADMIN_ID.split(',') if id.strip()]
    snab_chats = [id.strip() for id in CHAT_SNAB_ID.split(',') if id.strip()]
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ ID)
    is_private_chat = message.chat.type == 'private'
    is_in_allowed_groups = chat_id_str in admin_chats or chat_id_str in snab_chats
    
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id_str} (—Ç–∏–ø: {message.chat.type})")
    logger.info(f"   üìã –õ–∏—á–Ω—ã–π —á–∞—Ç: {is_private_chat}")
    logger.info(f"   üìã –í —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö: {is_in_allowed_groups}")
    
    return is_private_chat or is_in_allowed_groups

def get_worksheet_for_chat(chat_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–∏—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Ç–∞"""
    chat_id_str = str(chat_id)
    admin_chats = [id.strip() for id in CHAT_ADMIN_ID.split(',') if id.strip()]
    
    # –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω –ª–∏—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if chat_id > 0:  # –õ–∏—á–Ω—ã–π —á–∞—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID)
        logger.info(f"üìù –õ–∏—á–Ω—ã–π —á–∞—Ç {chat_id_str} -> –ê–¥–º–∏–Ω –ª–∏—Å—Ç")
        return sh.worksheet(SHEET_ADMIN_NAME)
    elif chat_id_str in admin_chats:
        logger.info(f"üìù –ê–¥–º–∏–Ω –≥—Ä—É–ø–ø–∞ {chat_id_str} -> –ê–¥–º–∏–Ω –ª–∏—Å—Ç")
        return sh.worksheet(SHEET_ADMIN_NAME)
    else:
        logger.info(f"üìù –°–Ω–∞–± –≥—Ä—É–ø–ø–∞ {chat_id_str} -> –°–Ω–∞–± –ª–∏—Å—Ç")
        return sh.worksheet(SHEET_SNAB_NAME)

@bot.message_handler(func=is_authorized_chat, content_types=['text', 'document', 'photo', 'video'])
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}) –≤ —á–∞—Ç–µ {message.chat.id}")
    logger.info(f"üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
    
    try:
        text = None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.content_type == 'text':
            text = message.text
            logger.info(f"üí¨ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
        elif message.content_type == 'document' and message.caption:
            text = message.caption
            logger.info(f"üìé –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {text}")
        elif message.content_type == 'photo' and message.caption:
            text = message.caption
            logger.info(f"üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ: {text}")
        elif message.content_type == 'video' and message.caption:
            text = message.caption
            logger.info(f"üé• –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞
        if not text or not text.startswith('@paycollect_bot'):
            logger.info("‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É @paycollect_bot, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            if message.content_type == 'document':
                bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–æ —è –ø—Ä–æ—á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ!")
            return
        
        logger.info("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É @paycollect_bot")
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        parsed_text = text.lstrip('@paycollect_bot').strip()
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {parsed_text}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        try:
            parts = [item.strip() for item in parsed_text.split('-')]
            logger.info(f"üìä –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π: {parts}")
            
            if len(parts) != 9:
                error_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: –æ–∂–∏–¥–∞–µ—Ç—Å—è 9, –ø–æ–ª—É—á–µ–Ω–æ {len(parts)}"
                logger.error(error_msg)
                bot.reply_to(message, f"–û—à–∏–±–∫–∞: {error_msg}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
                return
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            logger.error(error_msg)
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {error_msg}")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
        logger.info("‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π...")
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
        validations = [
            (r"\d{2}\.\d{2}\.\d{4}", parts[0], "–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)"),
            (r"[\w\s.,*-]+", parts[1], "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"),
            (r"[\w\s.,*-]+", parts[2], "–†–µ–≥–∏–æ–Ω/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
            (r"[\w\s.,*-]+", parts[3], "–≠—Ç–∞–ø/–≤–∏–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤"),
            (r"[\w\s.,*-]+", parts[4], "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
            (r"[\w\s.,*-]+", parts[5], "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤"),
            (r"^\d+$", parts[6], "–°—É–º–º–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)"),
            (r"[\w\s.,*-]+", parts[7], "–ü–æ—Å—Ç–∞–≤—â–∏–∫"),
            (r"[\w\s.,*-]+", parts[8], "–ö–æ–º–ø–∞–Ω–∏—è")
        ]
        
        for pattern, value, field_name in validations:
            if not re.match(pattern, value):
                error_msg = f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ª–µ '{field_name}': '{value}'"
                errors.append(error_msg)
                logger.warning(f"‚ö†Ô∏è {error_msg}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if errors:
            logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            for error in errors:
                bot.reply_to(message, error)
            return
        
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        try:
            date, project, direction, stage, category, description, amount, supplier, company = tuple(parts)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏
            logger.info(f"üìã –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏—Å—Ç –¥–ª—è —á–∞—Ç–∞ {message.chat.id}")
            worksheet = get_worksheet_for_chat(message.chat.id)
            worksheet_name = worksheet.title
            logger.info(f"üìÑ –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: '{worksheet_name}'")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
            telegram_link = f"https://t.me/c/{str(message.chat.id).lstrip('-100')}/{message.message_id}"
            row = [
                date, 
                project.strip(), 
                '', 
                direction.strip().title(), 
                stage.strip(), 
                category.strip(),
                description.strip(), 
                amount,
                supplier.strip(), 
                telegram_link, 
                company.strip()
            ]
            
            logger.info(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {row}")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            empty_row = find_empty_row(worksheet)
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: {empty_row}")
            
            if empty_row is None or empty_row > worksheet.row_count:
                error_msg = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"
                logger.error(f"‚ùå {error_msg}")
                bot.reply_to(message, f"–û—à–∏–±–∫–∞: {error_msg}")
                return
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.info(f"üíæ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫—É {empty_row}")
            
            for i, value in enumerate(row):
                try:
                    worksheet.update_cell(empty_row, i + 1, value)
                    logger.debug(f"‚úèÔ∏è –ó–∞–ø–∏—Å–∞–Ω–æ –≤ —è—á–µ–π–∫—É [{empty_row}, {i + 1}]: {value}")
                except Exception as cell_error:
                    error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —è—á–µ–π–∫—É [{empty_row}, {i + 1}]: {str(cell_error)}"
                    logger.error(f"‚ùå {error_msg}")
                    bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {error_msg}")
                    return
            
            # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å
            success_msg = "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Sheets!"
            logger.info(f"üéâ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–∏—Å—Ç '{worksheet_name}', —Å—Ç—Ä–æ–∫–∞ {empty_row}")
            bot.reply_to(message, success_msg)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –°—É–º–º–∞: {amount}, –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}")
            
        except Exception as processing_error:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(processing_error)}"
            logger.error(f"‚ùå {error_msg}")
            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {error_msg}")
            return

    except IndexError as e:
        error_msg = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        logger.error(f"üîç –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        logger.error(f"üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text if hasattr(message, 'text') else '–ù–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
    finally:
        logger.info("üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ PayCollect Bot...")
    logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   üìä Spreadsheet ID: {SPREADSHEET_ID}")
    logger.info(f"   üìÑ Admin –ª–∏—Å—Ç: {SHEET_ADMIN_NAME}")
    logger.info(f"   üìÑ Snab –ª–∏—Å—Ç: {SHEET_SNAB_NAME}")
    logger.info(f"   üë• Admin —á–∞—Ç—ã: {len(CHAT_ADMIN_ID.split(',')) if CHAT_ADMIN_ID else 0}")
    logger.info(f"   üë• Snab —á–∞—Ç—ã: {len(CHAT_SNAB_ID.split(',')) if CHAT_SNAB_ID else 0}")
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º polling...")
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ bot.log")
        bot.infinity_polling()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")
        logger.error(f"üîç Traceback: {traceback.format_exc()}")
        raise