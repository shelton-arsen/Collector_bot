#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import os
import sys
import time
import signal
import subprocess
import argparse
from pathlib import Path

class BotManager:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.venv_python = self.base_dir / '.venv' / 'bin' / 'python'
        self.bot_script = self.base_dir / 'bot.py'
        self.monitor_script = self.base_dir / 'monitor.py'
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è PID
        self.bot_pid_file = self.base_dir / '.bot.pid'
        self.monitor_pid_file = self.base_dir / '.monitor.pid'
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.is_bot_running():
            print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            process = subprocess.Popen(
                [str(self.venv_python), str(self.bot_script)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=str(self.base_dir)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
            with open(self.bot_pid_file, 'w') as f:
                f.write(str(process.pid))
            
            print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self.is_bot_running():
            print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        pid = self.get_bot_pid()
        if pid:
            try:
                os.kill(pid, signal.SIGTERM)
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                try:
                    os.kill(pid, 0)
                    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
                    os.kill(pid, signal.SIGKILL)
                except OSError:
                    pass
                
                # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
                if self.bot_pid_file.exists():
                    self.bot_pid_file.unlink()
                
                print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
                return False
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.stop_bot()
        time.sleep(2)
        return self.start_bot()
    
    def start_monitor(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_monitor_running():
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        try:
            process = subprocess.Popen(
                [str(self.venv_python), str(self.monitor_script)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=str(self.base_dir)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
            with open(self.monitor_pid_file, 'w') as f:
                f.write(str(process.pid))
            
            port = os.getenv('MONITOR_PORT', 5000)
            print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
            print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://212.109.192.79:{port}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    def stop_monitor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.is_monitor_running():
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        pid = self.get_monitor_pid()
        if pid:
            try:
                os.kill(pid, signal.SIGTERM)
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                try:
                    os.kill(pid, 0)
                    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
                    os.kill(pid, signal.SIGKILL)
                except OSError:
                    pass
                
                # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
                if self.monitor_pid_file.exists():
                    self.monitor_pid_file.unlink()
                
                print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                return False
    
    def status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print("-" * 40)
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        if self.is_bot_running():
            pid = self.get_bot_pid()
            print(f"ü§ñ –ë–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (PID: {pid})")
        else:
            print("ü§ñ –ë–æ—Ç: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.is_monitor_running():
            pid = self.get_monitor_pid()
            port = os.getenv('MONITOR_PORT', 5000)
            print(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (PID: {pid})")
            print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{port}")
        else:
            print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print("-" * 40)
    
    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        self.start_bot()
        time.sleep(2)
        self.start_monitor()
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        self.stop_bot()
        self.stop_monitor()
    
    def restart_all(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        self.stop_all()
        time.sleep(3)
        self.start_all()
    
    def is_bot_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
        pid = self.get_bot_pid()
        if pid is None:
            return False
        
        try:
            os.kill(pid, 0)
            return True
        except OSError:
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            if self.bot_pid_file.exists():
                self.bot_pid_file.unlink()
            return False
    
    def is_monitor_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        pid = self.get_monitor_pid()
        if pid is None:
            return False
        
        try:
            os.kill(pid, 0)
            return True
        except OSError:
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            if self.monitor_pid_file.exists():
                self.monitor_pid_file.unlink()
            return False
    
    def get_bot_pid(self):
        """–ü–æ–ª—É—á–∞–µ—Ç PID –±–æ—Ç–∞"""
        if not self.bot_pid_file.exists():
            return None
        
        try:
            with open(self.bot_pid_file, 'r') as f:
                return int(f.read().strip())
        except (ValueError, IOError):
            return None
    
    def get_monitor_pid(self):
        """–ü–æ–ª—É—á–∞–µ—Ç PID –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.monitor_pid_file.exists():
            return None
        
        try:
            with open(self.monitor_pid_file, 'r') as f:
                return int(f.read().strip())
        except (ValueError, IOError):
            return None
    
    def install_service(self):
        """–°–æ–∑–¥–∞–µ—Ç systemd service –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        service_content = f"""[Unit]
Description=PayCollect Bot Service
After=network.target

[Service]
Type=forking
User=www-root
WorkingDirectory={self.base_dir}
ExecStart={self.base_dir}/manage.py start-all
ExecStop={self.base_dir}/manage.py stop-all
ExecReload={self.base_dir}/manage.py restart-all
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
        
        service_file = '/etc/systemd/system/paycollect-bot.service'
        
        try:
            print("üìù –°–æ–∑–¥–∞–Ω–∏–µ systemd service...")
            with open(service_file, 'w') as f:
                f.write(service_content)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(__file__, 0o755)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –≤–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
            subprocess.run(['systemctl', 'daemon-reload'], check=True)
            subprocess.run(['systemctl', 'enable', 'paycollect-bot'], check=True)
            
            print("‚úÖ Systemd service —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω")
            print("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:")
            print("   systemctl start paycollect-bot")
            print("   systemctl stop paycollect-bot")
            print("   systemctl status paycollect-bot")
            
        except PermissionError:
            print("‚ùå –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ sudo –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è systemd service")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python3 manage.py install-service")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è service: {e}")

def main():
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PayCollect Bot')
    
    parser.add_argument('command', choices=[
        'start-bot', 'stop-bot', 'restart-bot',
        'start-monitor', 'stop-monitor',
        'start-all', 'stop-all', 'restart-all',
        'status', 'install-service'
    ], help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    args = parser.parse_args()
    manager = BotManager()
    
    commands = {
        'start-bot': manager.start_bot,
        'stop-bot': manager.stop_bot,
        'restart-bot': manager.restart_bot,
        'start-monitor': manager.start_monitor,
        'stop-monitor': manager.stop_monitor,
        'start-all': manager.start_all,
        'stop-all': manager.stop_all,
        'restart-all': manager.restart_all,
        'status': manager.status,
        'install-service': manager.install_service
    }
    
    command_func = commands.get(args.command)
    if command_func:
        try:
            command_func()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(1)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
        sys.exit(1)

if __name__ == '__main__':
    main()
